name: AWS ELB create target group

on:
  workflow_call:
    inputs:
      environment:
        description: Environment
        required: true
        type: string

      repo_name:
        description: Repository name
        required: true
        type: string

      port:
        description: Service port
        required: true
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      id-token: write

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::778942390430:role/github-actions-cicd-role
          role-session-name: cicd
          aws-region: ap-northeast-2

      - name: Configure suffix
        if: ${{ inputs.environment == 'development' }}
        run: echo "SUFFIX=-dev" >> $GITHUB_ENV;

      - name: Configure vpc id
        if: ${{ inputs.environment == 'development' }}
        run: echo "VPCID=vpc-09847396b8d639571" >> $GITHUB_ENV;

      - name: Configure loadbalancer
        if: ${{ inputs.environment == 'development' }}
        run: echo "ELB=arn:aws:elasticloadbalancing:ap-northeast-2:778942390430:loadbalancer/app/funpik-development-external-lb/fb59578db261a487" >> $GITHUB_ENV;

      - name: Configure certificate
        if: ${{ inputs.environment == 'development' }}
        run: echo "CERT=arn:aws:acm:ap-northeast-2:778942390430:certificate/9afc89b8-961a-4368-afe7-03be7aff7249" >> $GITHUB_ENV;
      
      - name: Create target group
        run: |
          aws elbv2 create-target-group \
            --name ${{ inputs.repo_name }}${{ env.SUFFIX }} \
            --protocol HTTP \
            --protocol-version HTTP1 \
            --port 8000 \
            --target-type ip \
            --vpc-id ${{ env.VPCID }} \
            --region ap-northeast-2 \
            --health-check-protocol HTTP \
            --health-check-path "/v1/health" \
            --tags Key=Name,Value=${{ inputs.repo_name }}${{ env.SUFFIX }}-tg

      - name: Get target group
        run: |
          aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=Name,Values=${{ inputs.repo_name }}${{ env.SUFFIX }}-tg \
            --region ap-northeast-2 | jq -r '.ResourceTagMappingList | .[] | .ResourceARN'  >> ./tmp.txt;

          cat ./tmp.txt;
          echo "TG=$(cat ./tmp.txt)" >> $GITHUB_ENV;

      - name: Create elb listener
        run: |
          aws elbv2 create-listener \
            --region ap-northeast-2 \
            --load-balancer-arn ${{ env.ELB }} \
            --protocol HTTPS \
            --port ${{ inputs.port }} \
            --certificates "CertificateArn=${{ env.CERT }}" \
            --default-actions "Type=forward,TargetGroupArn=${{ env.TG }}"

  