name: Docker build and push

inputs:
  aws_org_id:
    description: AWS Organization Id
    required: true
    type: string

  service_name:
    description: Service name
    required: true
    type: string

  image_tag:
    description: Image tag
    required: false
    type: string
    default: dev

  region:
    description: AWS region
    required: true
    type: string

  cicd_git_token:
    required: false
    description: Git access token

runs:
  using: composite
  steps:
    - name: test
      run: |
        echo ${{ inputs.aws_org_id }}
      shell: bash
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws_org_id }}:role/github-actions-cicd-role
        role-session-name: cicd
        aws-region: ${{ inputs.region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create repository if not exists
      run: |
        aws ecr describe-repositories \
          --repository-names ${{ inputs.service_name }}${{ env.SUFFIX }} || \
        aws ecr create-repository \
          --repository-name ${{ inputs.service_name }}${{ env.SUFFIX }}
      shell: bash

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.service_name }}
        IMAGE_TAG: ${{ inputs.image_tag }}
        GIT_TOKEN: ${{ inputs.cicd_git_token }}
      run: |
        if [[ $GIT_TOKEN ]]
        then
          TMP_ARG="--build-arg GIT_TOKEN=$GIT_TOKEN"
        fi;
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $TMP_ARG;
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG;
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      shell: bash
